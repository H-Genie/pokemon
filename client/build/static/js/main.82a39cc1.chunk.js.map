{"version":3,"sources":["hooks/usePokemon.ts","Components/PokemonList.tsx","pages/IndexPage.tsx","utils.ts","Components/PokemonInfo.tsx","Components/Tabs.tsx","hooks/useAbilities.ts","Components/Abilities.tsx","Components/About.tsx","Components/Stats.tsx","hooks/useEvolutionChain.ts","Components/EvolutionStage.tsx","Components/Evolution.tsx","hooks/useSpecies.ts","pages/DetailPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["pokemonApi","id","axios","get","params","limit","usePokemon","useQuery","Base","ListItem","List","Image","Name","Index","LoadingWrapper","Loading","PokemonList","isLoading","isError","data","getIamgeUrl","index","formatNumbering","String","padStart","src","alt","results","map","pokemon","to","name","styled","div","Title","h1","Description","small","ImageWrapper","img","IndexPage","mapColorToHex","color","mapTypeToHex","type","ThumbnailImageWrapper","ThumbnailImage","InfoWrapper","TypeWrapper","TypeList","TypeInfo","PokemonInfo","types","console","log","TabButton","active","Tabs","tab","onClick","style","backgroundColor","useAbilities","abilities","queries","ability","queryKey","queryFn","url","useQueries","Label","Abilities","effect_entries","effect","FlavorText","TypeImage","TypeLabel","InfpContainerWrapper","InfoContainer","InfoItem","InfoItemLabel","About","growthRate","flavorText","genderRate","isLegendary","isMythical","weight","height","baseExp","rarity","toUpperCase","Amount","GaugeWrapper","Gauge","percentage","Stats","stats","stat","base_stat","useEvolutionChain","DividerWrapper","Divider","Text","EvolutionStage","level","from","names","usePokemonQueries","prev","next","sprites","other","front_default","EmptyWrapper","Empty","Evolution","isSuccess","useState","evolutionChain","setEvolutionChain","useEffect","makeEvolutionChain","chain","evolves_to","length","evolvesTo","species","evolution_details","min_level","useSpecies","speciesApi","DetailPage","useParams","selectedTab","setSelectedTab","pokemonResult","speciesResult","useMemo","base_experience","growth_rate","flavor_text_entries","flavor_text","gender_rate","is_legendary","is_mythical","evolutionChainUrl","evolution_chain","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.82a39cc1.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { useQueries, useQuery, UseQueryResult } from \"react-query\";\r\n\r\nimport { PokemonResponse } from \"../types\";\r\n\r\nconst pokemonApi = (id?: string) => axios.get(`https://pokeapi.co/api/v2/pokemon/${id || \"\"}`, { params: { limit: 649 } });\r\n\r\nconst usePokemon = <T>(id?: string): UseQueryResult<AxiosResponse<T>, Error> => {\r\n    return useQuery(id ? [\"pokemon\", id] : \"pokemon\", () => pokemonApi(id));\r\n};\r\n\r\nexport const usePokemonQueries = (names: string[]): Array<UseQueryResult<AxiosResponse<PokemonResponse>, Error>> => {\r\n    const queries = names.map((name: string, index: number) => ({\r\n        queryKey: [\"evolution\", `${name}_${index}`],\r\n        queryFn: () => pokemonApi(name),\r\n    }));\r\n    return useQueries(queries) as Array<UseQueryResult<AxiosResponse<PokemonResponse>, Error>>;\r\n};\r\n\r\nexport default usePokemon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Link } from \"react-router-dom\";\r\nimport usePokemon from \"../hooks/usePokemon\";\r\nimport { ListResponse } from \"../types\";\r\n\r\nconst Base = styled.div`\r\n    margin-top: 24px;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    position: relative;\r\n    list-style: none;\r\n    display: flex;\r\n    align-items: center;\r\n    box-shadow: 6px 4px 14px 5px rgba(0, 0, 0, 0.21);\r\n    border-radius: 12px;\r\n    & + & {\r\n        margin-top: 18px;\r\n    }\r\n`;\r\n\r\nconst List = styled.ul`\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    a {\r\n        display: block;\r\n        margin-top: 18px;\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\nconst Image = styled.img``;\r\n\r\nconst Name = styled.p`\r\n    margin: 0;\r\n    padding: 0 0 0 12px;\r\n    flex: 1 1 100%;\r\n    color: #374151;\r\n    text-transform: capitalize;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Index = styled.p`\r\n    position: absolute;\r\n    margin: 0;\r\n    padding: 0;\r\n    right: 16px;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: #d1d5db;\r\n`;\r\n\r\nconst LoadingWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: calc(100vh - 180px);\r\n`;\r\n\r\nconst Loading = styled.img``;\r\n\r\nconst PokemonList: React.FC = () => {\r\n    const { isLoading, isError, data } = usePokemon<ListResponse>();\r\n    const getIamgeUrl = (index: number): string => `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index}.png`;\r\n    const formatNumbering = (index: number): string => {\r\n        return `#${String(index).padStart(3, \"0\")}`;\r\n    };\r\n\r\n    return (\r\n        <Base>\r\n            {isLoading || isError ? (\r\n                <LoadingWrapper>\r\n                    <Loading src=\"/loading.gif\" alt=\"loading\"></Loading>\r\n                </LoadingWrapper>\r\n            ) : (\r\n                <List>\r\n                    {data?.data.results.map((pokemon, index) => (\r\n                        <Link to={`/${index + 1}`} key={pokemon.name}>\r\n                            <ListItem>\r\n                                <Image src={getIamgeUrl(index + 1)} />\r\n                                <Name>{pokemon.name}</Name>\r\n                                <Index>{formatNumbering(index + 1)}</Index>\r\n                            </ListItem>\r\n                        </Link>\r\n                    ))}\r\n                </List>\r\n            )}\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default PokemonList;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport PokemonList from \"../Components/PokemonList\";\r\n\r\nconst Base = styled.div`\r\n    padding: 12px 18px;\r\n    overflow: hidden;\r\n    position: relative;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #d34f49;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Description = styled.small`\r\n    color: #6b7280;\r\n    padding: 0;\r\n    margin: 16px 0 0 0;\r\n    display: block;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n    position: absolute;\r\n    width: 288px;\r\n    height: 288px;\r\n    top: 0;\r\n    right: 0;\r\n    opacity: 0.4;\r\n    transform: translate(96px, -96px);\r\n`;\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n`;\r\n\r\nconst IndexPage: React.FC = () => {\r\n    return (\r\n        <Base>\r\n            <Title>Pokémon</Title>\r\n            <Description>The Pokémon contains detailed stats for every creature from the Pokémon games.</Description>\r\n            <PokemonList />\r\n            <ImageWrapper>\r\n                <Image src=\"/assets/pocketball.svg\" />\r\n            </ImageWrapper>\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default IndexPage;\r\n","export const mapColorToHex = (color?: string) => {\r\n    switch (color) {\r\n        case \"white\":\r\n        case \"gray\":\r\n            return \"#6B7280\";\r\n        case \"brown\":\r\n            return \"#92400E\";\r\n        case \"yellow\":\r\n            return \"#F59E0B\";\r\n        case \"green\":\r\n            return \"#10B981\";\r\n        case \"red\":\r\n            return \"#EF4444\";\r\n        case \"blue\":\r\n            return \"#3B82F6\";\r\n        case \"purple\":\r\n            return \"#8B5CF6\";\r\n        case \"pink\":\r\n            return \"#EC4899\";\r\n        case \"black\":\r\n            return \"#1F2937\";\r\n        default:\r\n            return \"#6B7280\";\r\n    }\r\n};\r\n\r\nexport const mapTypeToHex = (type?: string) => {\r\n    switch (type) {\r\n        case \"bug\":\r\n            return \"#92BC2C\";\r\n        case \"dark\":\r\n            return \"#595761\";\r\n        case \"dragon\":\r\n            return \"#0C69C8\";\r\n        case \"electric\":\r\n            return \"#F2D94E\";\r\n        case \"fire\":\r\n            return \"#FBA54C\";\r\n        case \"fairy\":\r\n            return \"#EE90E6\";\r\n        case \"fighting\":\r\n            return \"#D3425F\";\r\n        case \"flying\":\r\n            return \"#A1BBEC\";\r\n        case \"ghost\":\r\n            return \"#5F6DBC\";\r\n        case \"grass\":\r\n            return \"rgba(5, 150, 105, 1)\";\r\n        case \"ground\":\r\n            return \"#DA7C4D\";\r\n        case \"ice\":\r\n            return \"#75D0C1\";\r\n        case \"normal\":\r\n            return \"#A0A29F\";\r\n        case \"poison\":\r\n            return \"#B763CF\";\r\n        case \"psychic\":\r\n            return \"#FA8581\";\r\n        case \"rock\":\r\n            return \"#C9BB8A\";\r\n        case \"steel\":\r\n            return \"#5695A3\";\r\n        case \"water\":\r\n            return \"#539DDF\";\r\n        default:\r\n            return \"#6B7280\";\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { mapColorToHex, mapTypeToHex } from \"../utils\";\r\nimport { Type, Color } from \"../types\";\r\n\r\nconst Base = styled.div<{ color?: string }>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: ${({ color }) => color};\r\n    padding: 20px;\r\n    border-bottom-left-radius: 20%;\r\n    border-bottom-right-radius: 20%;\r\n    position: relative;\r\n`;\r\n\r\nconst ThumbnailImageWrapper = styled.div`\r\n    width: 160px;\r\n    margin-inline: auto;\r\n    margin-block: 24px;\r\n`;\r\n\r\nconst ThumbnailImage = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n`;\r\n\r\nconst InfoWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`;\r\n\r\nconst Name = styled.div`\r\n    color: #fff;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    text-transform: capitalize;\r\n`;\r\n\r\nconst Index = styled.div`\r\n    color: #fff;\r\n    font-size: 36px;\r\n    font-weight: bold;\r\n    opacity: 0.7;\r\n`;\r\n\r\nconst TypeWrapper = styled.div<{ color?: string }>`\r\n    background: ${({ color }) => color};\r\n    padding: 4px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst TypeList = styled.div`\r\n    display: flex;\r\n    margin-top: 8px;\r\n    ${TypeWrapper} + ${TypeWrapper} {\r\n        margin-left: 8px;\r\n    }\r\n`;\r\n\r\nconst TypeInfo = styled.img`\r\n    height: 12px;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n    position: absolute;\r\n    width: 288px;\r\n    height: 288px;\r\n    left: -96px;\r\n    top: -96px;\r\n    opacity: 0.75;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n`;\r\n\r\ninterface Props {\r\n    id: string;\r\n    name?: string;\r\n    types?: Array<Type>;\r\n    color?: Color;\r\n}\r\n\r\nconst PokemonInfo: React.FC<Props> = ({ id, name, types, color }: Props) => {\r\n    const formatNumbering = (index: string): string => `#${index.padStart(3, \"0\")}`;\r\n    console.log(color);\r\n\r\n    return (\r\n        <Base color={mapColorToHex(color?.name)}>\r\n            <ImageWrapper>\r\n                <Image src=\"/assets/pocketball.svg\" />\r\n            </ImageWrapper>\r\n            <InfoWrapper>\r\n                <Name>{name}</Name>\r\n                <Index>{formatNumbering(id)}</Index>\r\n            </InfoWrapper>\r\n            <TypeList>\r\n                {types?.map(({ type }, index) => (\r\n                    <TypeWrapper key={index} color={mapTypeToHex(type.name)}>\r\n                        <TypeInfo src={`/assets/${type.name}.svg`} />\r\n                    </TypeWrapper>\r\n                ))}\r\n            </TypeList>\r\n            <ThumbnailImageWrapper>\r\n                <ThumbnailImage src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`} alt=\"image\" />\r\n            </ThumbnailImageWrapper>\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default PokemonInfo;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Color } from \"../types\";\r\nimport { mapColorToHex } from \"../utils\";\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    margin: 20px 0 0 20px;\r\n    padding: 0;\r\n    display: flex;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    & + & {\r\n        margin-left: 16px;\r\n    }\r\n`;\r\n\r\nconst TabButton = styled.button<{ active?: boolean; color: string }>`\r\n    margin: 0;\r\n    border-radius: 8px;\r\n    box-shadow: 6px 4px 14px 5px rgba(0, 0, 0, 0.21);\r\n    padding: 6px 12px;\r\n    background-color: #fff;\r\n    border: none;\r\n    font-size: 16px;\r\n    color: ${({ active, color }) => (active ? color : \"#6b7280\")};\r\n`;\r\n\r\ninterface Props {\r\n    tab: \"about\" | \"stats\" | \"evolution\";\r\n    onClick: (tab: \"about\" | \"stats\" | \"evolution\") => void;\r\n    color?: Color;\r\n}\r\n\r\nconst Tabs: React.FC<Props> = ({ tab, onClick, color }: Props) => {\r\n    console.log(color);\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <Link to=\"/\">\r\n                    <TabButton color={mapColorToHex(color?.name)} style={{ backgroundColor: mapColorToHex(color?.name), color: \"white\" }}>\r\n                        Home\r\n                    </TabButton>\r\n                </Link>\r\n            </ListItem>\r\n            <ListItem onClick={() => onClick(\"about\")}>\r\n                <TabButton active={tab === \"about\"} color={mapColorToHex(color?.name)}>\r\n                    About\r\n                </TabButton>\r\n            </ListItem>\r\n            <ListItem onClick={() => onClick(\"stats\")}>\r\n                <TabButton active={tab === \"stats\"} color={mapColorToHex(color?.name)}>\r\n                    Stats\r\n                </TabButton>\r\n            </ListItem>\r\n            <ListItem onClick={() => onClick(\"evolution\")}>\r\n                <TabButton active={tab === \"evolution\"} color={mapColorToHex(color?.name)}>\r\n                    Evolution\r\n                </TabButton>\r\n            </ListItem>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Tabs;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { useQueries, UseQueryResult } from \"react-query\";\r\n\r\nimport { Ability, AbilityResponse } from \"../types\";\r\n\r\ntype ReturnType = AxiosResponse<AbilityResponse>;\r\n\r\nconst useAbilities = (abilities: Array<Ability>): Array<UseQueryResult<ReturnType, Error>> => {\r\n    const queries = abilities.map(({ ability }, index) => ({\r\n        queryKey: [\"ability\", index],\r\n        queryFn: () => axios.get(ability.url),\r\n    }));\r\n    return useQueries(queries) as Array<UseQueryResult<AxiosResponse<AbilityResponse>, Error>>;\r\n};\r\n\r\nexport default useAbilities;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Color, Ability } from \"../types\";\r\nimport { mapColorToHex } from \"../utils\";\r\nimport useAbilities from \"../hooks/useAbilities\";\r\n\r\nconst Base = styled.div`\r\n    margin-top: 32px;\r\n`;\r\n\r\nconst Title = styled.h4<{ color: string }>`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: ${({ color }) => color};\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    display: flex;\r\n`;\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 20px 0 0 0;\r\n    ${ListItem} + ${ListItem} {\r\n        margin-top: 12px;\r\n    }\r\n`;\r\n\r\nconst Label = styled.span`\r\n    flex: 1 0 30%;\r\n    text-transform: capitalize;\r\n    color: #374151;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Description = styled.span`\r\n    flex: 1 0 70%;\r\n    font-weight: 400;\r\n    font-size: 12px;\r\n    color: #374151;\r\n    word-wrap: break-word;\r\n`;\r\n\r\ninterface Props {\r\n    abilities: Array<Ability>;\r\n    color?: Color;\r\n}\r\n\r\nconst Abilities: React.FC<Props> = ({ color, abilities }) => {\r\n    const results = useAbilities(abilities);\r\n\r\n    return (\r\n        <Base>\r\n            <Title color={mapColorToHex(color?.name)}>Abilites</Title>\r\n            <List>\r\n                {results.map(\r\n                    ({ data }, index) =>\r\n                        data && (\r\n                            <ListItem key={index}>\r\n                                <Label>{data.data.name}</Label>\r\n                                <Description>{data.data.effect_entries[1].effect}</Description>\r\n                            </ListItem>\r\n                        )\r\n                )}\r\n            </List>\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default Abilities;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Color, Type, Ability } from \"../types\";\r\nimport { mapColorToHex, mapTypeToHex } from \"../utils\";\r\nimport Abilities from \"./Abilities\";\r\n\r\nconst Base = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst FlavorText = styled.p`\r\n    margin: 0 auto;\r\n    word-break: break-word;\r\n    font-size: 14px;\r\n    color: #374151;\r\n`;\r\n\r\nconst TypeWrapper = styled.div<{ color: string }>`\r\n    background-color: ${({ color }) => color};\r\n    padding: 4px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst TypeList = styled.div`\r\n    display: flex;\r\n    margin-top: 8px;\r\n    ${TypeWrapper} + ${TypeWrapper} {\r\n        margin-left: 8px;\r\n    }\r\n`;\r\n\r\nconst TypeImage = styled.img`\r\n    height: 12px;\r\n`;\r\n\r\nconst TypeLabel = styled.span`\r\n    margin-left: 4px;\r\n    color: #fff;\r\n    font-size: 10px;\r\n`;\r\n\r\nconst InfpContainerWrapper = styled.div`\r\n    margin-top: 32px;\r\n`;\r\n\r\nconst Title = styled.h4<{ color: string }>`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: ${({ color }) => color};\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    margin-top: 20px;\r\n    row-gap: 12px;\r\n`;\r\n\r\nconst InfoItem = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(2, minmax(0, 1fr));\r\n`;\r\n\r\nconst InfoItemLabel = styled.span`\r\n    font-weight: bold;\r\n    color: #374151;\r\n    font-size: 12px;\r\n`;\r\n\r\ninterface Props {\r\n    isLoading: boolean;\r\n    color?: Color;\r\n    // growthRate?: number;\r\n    growthRate?: string;\r\n    flavorText?: string;\r\n    // genderRate?: string;\r\n    genderRate?: any;\r\n    isLegendary?: boolean;\r\n    isMythical?: boolean;\r\n    types?: Array<Type>;\r\n    weight?: number;\r\n    height?: number;\r\n    baseExp?: number;\r\n    abilities?: Array<Ability>;\r\n}\r\n\r\nconst About: React.FC<Props> = ({ isLoading, color, growthRate, flavorText, genderRate, isLegendary, isMythical, types, weight, height, baseExp, abilities }: Props) => {\r\n    const rarity = isLegendary ? \"Legendary\" : isMythical ? \"Mythical\" : \"Normal\";\r\n\r\n    return (\r\n        <Base>\r\n            <FlavorText>{flavorText}</FlavorText>\r\n            <TypeList>\r\n                {types?.map(({ type }, index) => (\r\n                    <TypeWrapper key={index} color={mapTypeToHex(type.name)}>\r\n                        <TypeImage src={`/assets/${type.name}.svg`} />\r\n                        <TypeLabel>{type.name.toUpperCase()}</TypeLabel>\r\n                    </TypeWrapper>\r\n                ))}\r\n            </TypeList>\r\n            <InfpContainerWrapper>\r\n                <Title color={mapColorToHex(color?.name)}>Pokemon Data</Title>\r\n                <InfoContainer>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Height</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{height}</InfoItemLabel>\r\n                    </InfoItem>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Weight</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{weight}</InfoItemLabel>\r\n                    </InfoItem>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Gender</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{genderRate === -1 ? \"Unkown\" : \"Male / Female\"}</InfoItemLabel>\r\n                    </InfoItem>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Growth Rate</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{growthRate}</InfoItemLabel>\r\n                    </InfoItem>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Base Exp</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{baseExp}</InfoItemLabel>\r\n                    </InfoItem>\r\n                    <InfoItem>\r\n                        <InfoItemLabel>Rarity</InfoItemLabel>\r\n                        <InfoItemLabel color={mapColorToHex(color?.name)}>{rarity}</InfoItemLabel>\r\n                    </InfoItem>\r\n                </InfoContainer>\r\n            </InfpContainerWrapper>\r\n            {abilities && <Abilities abilities={abilities} />}\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Color, Stat } from \"../types\";\r\nimport { mapColorToHex } from \"../utils\";\r\n\r\nconst Base = styled.div`\r\n    margin-top: 32px;\r\n    padding: 0 20px 20px;\r\n`;\r\n\r\nconst Title = styled.h4<{ color: string }>`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: ${({ color }) => color};\r\n`;\r\n\r\nconst List = styled.ul`\r\n    margin: 20px 0 0 0;\r\n    padding: 0;\r\n    list-style: none;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    display: grid;\r\n    grid-template-columns: repeat(12, minmax(0, 1fr));\r\n    & + & {\r\n        margin-top: 12px;\r\n    }\r\n`;\r\n\r\nconst Name = styled.div`\r\n    grid-column: span 4 / span 4;\r\n    color: #374151;\r\n    font-weight: bold;\r\n    text-transform: capitalize;\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Amount = styled.div`\r\n    grid-column: span 1 / span 1;\r\n    font-size: 12px;\r\n    color: #374151;\r\n`;\r\n\r\nconst GaugeWrapper = styled.div`\r\n    grid-column: span 7 / span 7;\r\n    border-radius: 12px;\r\n    background-color: #e5e7eb;\r\n`;\r\n\r\nconst Gauge = styled.div<{ percentage: number; color: string }>`\r\n    background-color: ${({ color }) => color};\r\n    width: ${({ percentage }) => `${percentage}%`};\r\n    height: 100%;\r\n    border-radius: 12px;\r\n`;\r\n\r\ninterface Props {\r\n    isLoading: boolean;\r\n    stats?: Array<Stat>;\r\n    color?: Color;\r\n}\r\n\r\nconst Stats: React.FC<Props> = ({ stats, color }: Props) => {\r\n    return (\r\n        <Base>\r\n            <Title color={mapColorToHex(color?.name)}>Base Stats</Title>\r\n            <List>\r\n                {stats?.map(({ stat, base_stat }, index) => (\r\n                    <ListItem key={index}>\r\n                        <Name>{stat.name}</Name>\r\n                        <Amount>{base_stat}</Amount>\r\n                        <GaugeWrapper>\r\n                            <Gauge percentage={(base_stat / 255) * 100} color={mapColorToHex(color?.name)}></Gauge>\r\n                        </GaugeWrapper>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default Stats;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { useQuery, UseQueryResult } from \"react-query\";\r\n\r\nimport { EvolutionChainResponse } from \"../types\";\r\n\r\nconst useEvolutionChain = (url?: string): UseQueryResult<AxiosResponse<EvolutionChainResponse>, Error> => useQuery([\"evolution\", { url }], () => (url ? axios.get(url) : null));\r\n\r\nexport default useEvolutionChain;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Color } from \"../types\";\r\nimport { mapColorToHex } from \"../utils\";\r\nimport { usePokemonQueries } from \"../hooks/usePokemon\";\r\n\r\nconst Base = styled.li`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst DividerWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`;\r\n\r\nconst Divider = styled.div`\r\n    background-color: #d1d5db;\r\n    border-radius: 12px;\r\n    height: 8px;\r\n    margin-inline: 8px;\r\n    margin-top: 4px;\r\n`;\r\n\r\nconst ImageWrapper = styled.div``;\r\n\r\nconst Image = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n`;\r\n\r\nconst Text = styled.div<{ color: string }>`\r\n    text-align: center;\r\n    color: ${({ color }) => color};\r\n    font-size: 12px;\r\n`;\r\n\r\ninterface Props {\r\n    level: number;\r\n    color?: Color;\r\n    from: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n    to: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n}\r\n\r\nconst EvolutionStage: React.FC<Props> = ({ level, color, from, to }: Props) => {\r\n    const [prev, next] = usePokemonQueries([from.name, to.name]);\r\n\r\n    return (\r\n        <Base>\r\n            <ImageWrapper>\r\n                <Image src={prev.data?.data.sprites.other[\"official-artwork\"].front_default} />\r\n            </ImageWrapper>\r\n            <DividerWrapper>\r\n                {level && <Text color={mapColorToHex(color?.name)}>{`level : ${level}`}</Text>}\r\n                <Divider></Divider>\r\n            </DividerWrapper>\r\n            <ImageWrapper>\r\n                <Image src={next.data?.data.sprites.other[\"official-artwork\"].front_default} />\r\n            </ImageWrapper>\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default EvolutionStage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { Color, Chain } from \"../types\";\r\nimport { mapColorToHex } from \"../utils\";\r\nimport useEvolutionChain from \"../hooks/useEvolutionChain\";\r\nimport EvolutionStage from \"./EvolutionStage\";\r\n\r\nconst Base = styled.div`\r\n    margin-top: 32px;\r\n    padding: 0 20px 20px;\r\n`;\r\n\r\nconst Title = styled.h4<{ color: string }>`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: ${({ color }) => color};\r\n`;\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    margin: 20px 0 0 0;\r\n    padding: 0;\r\n    > li + li {\r\n        margin-top: 24px;\r\n    }\r\n`;\r\n\r\nconst EmptyWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: calc(100vh - 444px);\r\n`;\r\n\r\nconst Empty = styled.div<{ color: string }>`\r\n    color: ${({ color }) => color};\r\n`;\r\n\r\ninterface Props {\r\n    isLoading: boolean;\r\n    id?: string;\r\n    color?: Color;\r\n    url?: string;\r\n}\r\n\r\nconst Evolution: React.FC<Props> = ({ color, url }: Props) => {\r\n    const { isSuccess, data } = useEvolutionChain(url);\r\n    const [evolutionChain, setEvolutionChain] = useState<Array<{ from: { name: string; url: string }; to: { name: string; url: string }; level: number }>>([]);\r\n\r\n    useEffect(() => {\r\n        const makeEvolutionChain = (chain: Chain) => {\r\n            if (chain.evolves_to.length) {\r\n                const [evolvesTo] = chain.evolves_to;\r\n                const from = chain.species;\r\n                const to = evolvesTo.species;\r\n                const level = evolvesTo.evolution_details[0].min_level;\r\n\r\n                setEvolutionChain((prev) => [...prev, { from, to, level }]);\r\n                makeEvolutionChain(chain.evolves_to[0]);\r\n            }\r\n        };\r\n\r\n        isSuccess && data && makeEvolutionChain(data.data.chain);\r\n        return (): void => setEvolutionChain([]);\r\n    }, [isSuccess, data]);\r\n\r\n    return (\r\n        <Base>\r\n            <Title color={mapColorToHex(color?.name)}>Evolution</Title>\r\n            {evolutionChain.length ? (\r\n                <List>\r\n                    {evolutionChain.map(({ from, to, level }, index) => (\r\n                        <EvolutionStage level={level} from={from} to={to} key={index} />\r\n                    ))}\r\n                </List>\r\n            ) : (\r\n                <EmptyWrapper>\r\n                    <Empty color={mapColorToHex(color?.name)}>This pokemon does not evolve.</Empty>\r\n                </EmptyWrapper>\r\n            )}\r\n        </Base>\r\n    );\r\n};\r\n\r\nexport default Evolution;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { SpeciesResponse } from \"../types\";\r\n\r\nconst speciesApi = (id: string) => axios.get(`https://pokeapi.co/api/v2/pokemon-species/${id}`);\r\nconst useSpecies = (id: string) => useQuery<AxiosResponse<SpeciesResponse>, Error>([\"species\", { id }], () => speciesApi(id));\r\n\r\nexport default useSpecies;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport PokemonInfo from \"../Components/PokemonInfo\";\r\nimport Tabs from \"../Components/Tabs\";\r\nimport About from \"../Components/About\";\r\nimport Stats from \"../Components/Stats\";\r\nimport Evolution from \"../Components/Evolution\";\r\n\r\nimport usePokemon from \"../hooks/usePokemon\";\r\nimport useSpecies from \"../hooks/useSpecies\";\r\nimport { PokemonResponse } from \"../types\";\r\n\r\ntype Params = {\r\n    id: string;\r\n};\r\n\r\ntype Tab = \"about\" | \"stats\" | \"evolution\";\r\n\r\nconst DetailPage: React.FC = () => {\r\n    const { id } = useParams<Params>();\r\n    const [selectedTab, setSelectedTab] = useState<Tab>(\"about\");\r\n\r\n    const pokemonResult = usePokemon<PokemonResponse>(id);\r\n    const speciesResult = useSpecies(id);\r\n\r\n    const { name, types, height, weight, abilities, baseExp, stats } = useMemo(\r\n        () => ({\r\n            name: pokemonResult.data?.data.name,\r\n            types: pokemonResult.data?.data.types,\r\n            height: pokemonResult.data?.data.height,\r\n            weight: pokemonResult.data?.data.weight,\r\n            abilities: pokemonResult.data?.data.abilities,\r\n            baseExp: pokemonResult.data?.data.base_experience,\r\n            stats: pokemonResult.data?.data.stats,\r\n        }),\r\n        [pokemonResult]\r\n    );\r\n    const { color, growthRate, isLegendary, isMythical, evolutionChainUrl } = useMemo(\r\n        () => ({\r\n            color: speciesResult.data?.data.color,\r\n            growthRate: speciesResult.data?.data.growth_rate.name,\r\n            flavorText: speciesResult.data?.data.flavor_text_entries[0].flavor_text,\r\n            genderRate: speciesResult.data?.data.gender_rate,\r\n            isLegendary: speciesResult.data?.data.is_legendary,\r\n            isMythical: speciesResult.data?.data.is_mythical,\r\n            evolutionChainUrl: speciesResult.data?.data.evolution_chain.url,\r\n        }),\r\n        [speciesResult]\r\n    );\r\n\r\n    const handleClick = (tab: Tab) => setSelectedTab(tab);\r\n\r\n    return (\r\n        <div>\r\n            <PokemonInfo id={id} name={name} types={types} color={color} />\r\n            <Tabs tab={selectedTab} onClick={handleClick} color={color} />\r\n            {selectedTab === \"about\" && (\r\n                <About\r\n                    isLoading={pokemonResult.isLoading || speciesResult.isLoading}\r\n                    color={color}\r\n                    genderRate={growthRate}\r\n                    isLegendary={isLegendary}\r\n                    isMythical={isMythical}\r\n                    types={types}\r\n                    weight={weight}\r\n                    height={height}\r\n                    baseExp={baseExp}\r\n                    abilities={abilities}\r\n                />\r\n            )}\r\n            {selectedTab === \"stats\" && <Stats isLoading={pokemonResult.isLoading || speciesResult.isLoading} color={color} stats={stats} />}\r\n            {selectedTab === \"evolution\" && <Evolution id={id} isLoading={speciesResult.isLoading} color={color} url={evolutionChainUrl} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DetailPage;\r\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport IndexPage from \"./pages/IndexPage\";\nimport DetailPage from \"./pages/DetailPage\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" component={IndexPage} />\n                <Route path=\"/:id\" component={DetailPage} />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <React.StrictMode>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}